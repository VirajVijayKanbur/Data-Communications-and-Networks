//CLIENT - SERVER CHAT APPLICATION

//CLIENT(TCP):

#include<stdio.h>
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<stdlib.h>
#define port 5000
void main()
{
struct sockaddr_in serveraddr;
struct sockaddr_in newaddr;
int clisocket;
int size;
char buffer[100];
char username[100];
char password[100];
char msg[100];
while(1)
{
clisocket=socket(AF_INET,SOCK_STREAM,0);
if(clisocket>0)printf("socket created");
serveraddr.sin_family=AF_INET;
serveraddr.sin_port=htons(port);
serveraddr.sin_addr.s_addr=inet_addr("127.0.0.1");
connect(clisocket,(struct sockaddr *)&serveraddr,sizeof(serveraddr));
printf("Enter username %s",username);
scanf("%s",username);
printf("Enter username %s",username);
scanf("%s",username);
send(clisocket,username,1024,0);
send(clisocket,password,1024,0);
recv(clisocket,msg,sizeof(msg),0);
if(recv=="yes")
{
printf("Enter message to send to server :");
scanf("%s",buffer);
if(buffer[0]=='0')
{
break;
}
send(clisocket,sizeof(buffer),1024,0);
recv(clisocket,sizeof(buffer),1024,0);
printf("\n Received from server: %s",buffer);
}
else
{
break;
}
close(clisocket);
}
}

//SERVER(TCP)

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<sys/types.h>
#include<sys/socket.h>
#define port 5000
void main()
{
int sersocket,s,newsocket,clisocket;
struct sockaddr_in serveraddr;
struct sockaddr_in newaddr;
sersocket=socket(AF_INET,SOCK_STREAM,0);
if(sersocket>0) printf("socket created");
serveraddr.sin_family=AF_INET;
serveraddr.sin_port=htons(port);
serveraddr.sin_addr.s_addr=htonl(INADDR_ANY);

s=bind(sersocket,(struct sockaddr *)&serveraddr,
sizeof(serveraddr))
if(s==0) printf("\nsocket is binded");

listen(sersocket,1);
clisocket=sizeof(newaddr);
int n;
char buffer[100];
char usr[]="viraj";
char psw[]="kanbur";
char nameusr[100];
char pswuser[100];
char msg[10];
while((newsocket=accept(sersocket,(struct sockaddr *)&newaddr,&clisocket))>0)
{
recv(newsocket,nameusr,1024,0);
recv(newsocket,pswuser,1024,0);
if(strcmp(nameusr,usr)==0)
{
if(strcmp(pswuser,psw)==0)
{
msg="yes";
}
}
send(newsocket,msg,sizeof(msg),0);
while((n=recv(newsocket,buffer,sizeof(buffer,0))>0)
{
printf("data received by server %s",buffer);
printf("\nenter word to be sent to client ");
scanf("%s",buffer);
send(newsocket,buffer,sizeof(buffer),0);
}
}
close(sersocket);
//close(newsocket);
}







